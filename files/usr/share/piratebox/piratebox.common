#############################################################################
# PirateBox helper functions

if [ -e /etc/ext.config ] ;  then 
  . /etc/ext.config
  . $ext_linktarget/etc/piratebox.config
else
  . /etc/piratebox.config
fi





pb_setup() {

  pb_netconfig 
  
   touch $pb_inst_done
}

pb_nodns() {
  # disable local DNS per dnsmasq
  cp /tmp/resolv.conf.auto /tmp/resolv.conf
}


pb_ismounted() {
  mount | grep "on $1 " >/dev/null
}

pb_mount() {
  parts=$*
  [ "$parts" == "-a" ] && parts="pb"
  for part in $*
  do
    case $part in
      pb) 
          pb_ismounted "$pb_pbmount" && continue
	  pb_mount usb
	  [ -d "$pb_pbmount" ] || mkdir -p "$pb_pbmount"
	  if ! mount -o loop,rw,sync "$pb_pbimg" "$pb_pbmount"
	  then
	    echo "${initscript}: ERROR: unable to mount piratebox image" >&2
	    exit 5
	  fi
	  ;;
    esac
  done
}

pb_umount() {
  parts=$*
  [ "$parts" == "-a" ] && parts="pb"
  for part in $*
  do
    case $part in
      pb)
          losetup -d /dev/loop1 &>/dev/null
	  pb_ismounted "$pb_pbmount" || continue
	  if ! umount "$pb_pbmount"
	  then 
	     pb_stop &>/dev/null
	     sleep 2
	      if ! umount "$pb_pbmount"
	      then
	        echo "${initscript}: WARNING: unable to umount piratebox image" >&2
	     fi
	  fi
	  losetup -d /dev/loop1
	  ;;
    esac
  done
}

pb_uciadd() {
  local config=$1 ; shift
  local section=$1 ; shift
  local type=$1 ; shift
  [ -e "/etc/config/$config" ] || touch "/etc/config/$config"
  uci show "$config.$section" &>/dev/null \
    || uci add "$config $section" &>/dev/null
  uci set "$config.$section=$type"
}

pb_uciset() {
  local config=$1 ; shift
  local section=$1 ; shift
  local type=$1 ; shift
  pb_uciadd $config $section $type
  for opt in "$@"
  do
    uci set "$config.$section.$opt"
  done
  uci commit
}



#---------------------------------------------------------
# Generates a random suffix for PirateBox domain names
#   is used if the piratebox is running in mesh
#---------------------------------------------------------
pb_generateHostname() {
  local suffix=`</dev/urandom tr -dc a-zA-Z1-9 | head -c8`
  pb_random_hostname="$suffix.$pb_hostname"
}


 # reconfigure network
pb_netconfig() {
  
  work_hostname="$pb_hostname"
  if [  -e $pb_inst_flag_mesh ] ; then
       echo "${initscript}: Mesh package detected, generating random hostname"
       pb_generateHostname    
       work_hostname="$pb_random_hostname"
  fi
 
  
  #Use random Stuff for systems hostname
  uci set "system.@system[0].hostname=$work_hostname"

  # Add piratebox.lan
  echo "127.0.0.1 $pb_hostname localhost." >/etc/hosts
  echo "$pb_ip $pb_hostname" >>/etc/hosts
  
  if [  "$pb_hostname" = "$work_hostname" ] ; then
     #Add Random stuff
     echo "127.0.0.1 $pb_random_hostname ." >>/etc/hosts
     echo "$pb_ip $pb_random_hostname" >>/etc/hosts
   fi 

  uci set "network.lan.ipaddr=$pb_ip"
  uci set "network.lan.proto=static"

  # Make sure that the radio's are set in the wirless config
  wifi detect >> /etc/config/wireless

  #get all wifi-devices
  pb_radios=`uci show wireless | grep '=wifi-device' | awk -F'[.=]' '{ print $2 }'`

  #get currently defined ifaces and put them in reverse order
  pb_ifaces=`uci show wireless | grep '=wifi-iface' | awk -F'[.=]' '{ print $2 }' | sed '1!G;h;$!d'`

  #remove all ifaces except sta's not in the lan zone
  for pb_iface in $pb_ifaces; do
    [ "$(uci get wireless.$pb_iface.mode)" = 'sta' ] && [ "$(uci get wireless.$pb_iface.network)" != 'lan' ] && continue
    uci delete wireless.$pb_iface
  done

  #loop trough all availlable radios and enable them
  #set the needed wifi-ifaces again as well.
  for pb_radio in $pb_radios; do
    uci set wireless.$pb_radio.disabled=
    uci add wireless wifi-iface
    uci set wireless.@wifi-iface[-1].device="$pb_radio"
    uci set wireless.@wifi-iface[-1].mode='ap'
    uci set wireless.@wifi-iface[-1].network='lan'
    uci set wireless.@wifi-iface[-1].ssid="$pb_wireless_ssid"
    uci set wireless.@wifi-iface[-1].encryption='none'
    uci set wireless.@wifi-iface[-1].isolate='1'
  done
  
  #Add dns redirection rule
  uci add firewall redirect
  uci set firewall.@redirect[-1].name='dns_pbx'
  uci set firewall.@redirect[-1].src_dport='53'
  uci set firewall.@redirect[-1].target='DNAT'
  uci set firewall.@redirect[-1].proto='tcp udp'
  uci set firewall.@redirect[-1].src='lan'
  uci set firewall.@redirect[-1].dest_ip="$pb_ip"

  #Add http redirection rule, disabled by default
  uci add firewall redirect
  uci set firewall.@redirect[-1].enabled='0'
  uci set firewall.@redirect[-1].name='http_pbx'
  uci set firewall.@redirect[-1].src_dport='80'
  uci set firewall.@redirect[-1].target='DNAT'
  uci set firewall.@redirect[-1].proto='tcp'
  uci set firewall.@redirect[-1].src='lan'
  uci set firewall.@redirect[-1].dest_ip="$pb_ip"

  uci commit
}


pb_undoconfig() {
  # undo config changes
  uci delete fstab.pirateimage
  uci commit

  [ -d "$pb_pbmount"  ] && rmdir "$pb_pbmount"
}


pb_mkpbimg () {
   pb_umount pb
   [ -d "$(dirname $pb_pbimg)" ] || mkdir -p "$(dirname $pb_pbimg)"
   [ -d "$(dirname $pb_pb_srcImg)" ] || mkdir -p "$(dirname $pb_pb_srcImg)"
   if [ ! -e $pb_pb_srcImg ] ; then
      echo "${initscript}: No PirateBox Image file found... loading from Internet"
      wget -O $pb_pb_srcImg  $pb_pb_srcImg_url 
      if [ $?  -ne 0 ] ; then
         echo "${initscript}: ERROR: wget failed... cancel"
	 #remove a possible defect file
	 rm -f $pb_pb_srcImg
	 exit 5
      fi
   fi
   #gzip -dc  "$pb_pb_srcImg" > "$pb_pbimg" 
   tar xzO -f "$pb_pb_srcImg" > "$pb_pbimg" 
   pb_uciset fstab pirateimage mount \
        target=$pb_pbmount \
	device=$pb_pbimg \
	options=loop \
	enabled=1
}

pb_init() {

  echo "${initscript}: Creating piratebox loop image..."
  pb_mkpbimg
 
}


#Removes current image file and overwrite it with new one
pb_updatePBImage () {
    echo "${initscript}: Unmounting $pb_pbmount"
    pb_umount pb  
    [ ! -d "$pb_usbdir" ] && ( echo "${initscript}: ERROR: Seems the USB Stick ist not available" && exit 99 )         
    echo "${initscript}: Removing old image file if exists"
    rm  -f $pb_pbimg
    echo "${initscript}: Create new Image file"
    pb_mkpbimg 
    echo "${initscript}: Done"
}

#contains OpenWRT specific initialization, which was before 0.7 included in PirateBox scripts itself
pb_init_image() {
    $pb_pbmount/bin/hooks/hook_pre_openwrt_init.sh  "$pb_piratebox_conf" 


    echo "-------------- Initialize PirateBoxScripts -----------"
    rm -r $pb_pbmount/share
    ln -sf $pb_usbdir $pb_pbmount/share
    #chmod a+rw $CHATFILE  #should not be needed anymore

    if [ -d $pb_usbdir/www_alt ] ; then
          echo "----------------------------------------------------"
          echo "####      Alternative www folder found          ####"
          echo "####          $pb_www_alt                ####"
          echo "####         switching directories              ####"
          echo "----------------------------------------------------"
	  $pb_pbmount/bin/exchange_www.sh $pb_piratebox_conf  "$pb_www_alt"
 
    fi

    touch $pb_flag_image_init_done
}

pb_start() {
  pb_mount pb

   [ ! -f $pb_flag_image_init_done ] && pb_init_image 
#  mkdir -p $pb_share    
  $pb_pbmount/init.d/piratebox_alt start
}


pb_stop() {
  # killing all piratebox processes
  $pb_pbmount/init.d/piratebox_alt stop

  sleep 3
  pb_umount pb
}

pb_stop_and_keep(){
   $pb_pbmount/init.d/piratebox_alt stop
}


